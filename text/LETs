Here is how I've translated the different let-forms.

Simple let,

    (let ((k1 v1)
          (k2 v2))
          ; ...
          (body))

is translated to

    ((lambda (k2 k1) (body))
      v2 v1)

Let-star,

    (let* ((k1 v1)
           (k2 v2))
          ; ...

is translated to

    ((lambda (k1)
      ((lambda (k2)
        (body))
      v2))
    v1)

and mutually recursive let,

    (letrec ((k1 v1)
             (k2 v2))
            ; ...

is translated to

    (define k1 #f)
    (define k2 #f)
    (set! k1 v1)
    (set! k2 v2)

Finally, letrec-star,

    (letrec* ((k1 v1)
              (k2 v2))
             body)

is translated to

  (let
    ((k1 #f)
     (k2 #f))
    (set! k1 v1)
    (set! k2 v2)
    (let () body))

The last transformation is taken from R7RS draft.
