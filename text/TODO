- Kjør tests/variadic.scm, problemet er bare (->string rest), som feiler fordi rest er ikke satt.. Fikses ved å sette () som default value for rest, feks.  Eller sjekke standarden.
- Add memoization to lazy evaluation form
- Add letrec*, letrec
- Allow #\tab and friends, including "#\ "
- Fix expt for fractional exponents
- Look into exact->inexact stuff

NEXT STEPS, SHOULD BE ORDERED BY INCREASING DIFFICULTY
- Add character table
- Add our own stop-the-world, mark-and-sweep GC (is very simple for a language like scheme!)
- other let forms? -> flet, fluid-let? named let
- routine to detect tail calls
- routine to detect if we can eliminate the tail call
- Add tail call elimination, via longjumps (tested and should work, must have own "jumptable" for each thread, which is only 1 for our purposes)
- Refactor the code, it's A MESS at the moment...

HARDER
- Add library functions
- Add libffi support
- Add llvm primitives in scheme
- Craft llvm compiler (in scheme?)
- Add (fast) vector/SSE support through #(1 2 3)
- Add parallelization support (through some lib; see comp benchmarks game)
- Check up Hewitt's actor model, how it was solved in scheme
- Add support for continuations
- Add support for first class continuations

NEXT STEPS
- Make all llvm primitives callable by interpreter
  => implement functions as llvm primitives, e.g.:

    (define display
      (lambda (p)
        (while (not (null? p))
          (begin
            (if (not (pair? p))
              (ffi:printf "%s" (->c_string p))
              (display (eval (car p))))
            (set! p (cdr p))))))

  Some functions must be built-in, I guess, like "no", "null?", "->c_string" and so on.
  But perhaps later on, these can as well become something that can be implemented (?).
  (At least many of them).

DOWN THE LINE
- Add utf-8 support for strings, consider making it default
- Tail-call optimization
- call/cc
- delay/force
- Macros
