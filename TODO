ASAP
- *Can we remove now?*
    - Introduce evlis, i.e. eval args in eval so we can remove tedious evals in primitives
    - Fix evaluator (define/lookup, see Quiennec)
- Fix environment / closure
- Fix lambda
- We're now a proper Scheme, celebrate!
- Add library functions
- Add libffi support
- Add llvm primitives in scheme
- Craft llvm compiler (in scheme?)
- Add (fast) vector/SSE support through #(1 2 3)
- Add parallelization support (through some lib; see comp benchmarks game)
- Check up Hewitt's actor model, how it was solved in scheme
- Add support for continuation
- Add support for first class continuations
- Add support for delay/force

NEXT STEPS
- Add support for lexical closure (extending the environment)
- Add support for (lambda), use with closure and define above
  => now we're a *real* Lisp!
- Add (import) for reading other files
- Make all llvm primitives callable by interpreter
  => implement functions as llvm primitives, e.g.:

    (define display
      (lambda (p)
        (while (not (null? p))
          (begin
            (if (not (pair? p))
              (ffi:printf "%s" (->c_string p))
              (display (eval (car p))))
            (set! p (cdr p))))))

  Some functions must be built-in, I guess, like "no", "null?", "->c_string" and so on.
  But perhaps later on, these can as well become something that can be implemented (?).
  (At least many of them).

MEDIO
- Add character parsing, #\f for instance
- Add character table

DOWN THE LINE
- Add utf-8 support for strings, consider making it default
- Tail-call optimization
- call/cc
- delay/force
